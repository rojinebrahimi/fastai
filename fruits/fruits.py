# -*- coding: utf-8 -*-
"""fruits.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hKwKQCeKofySfTVRCy1sl50lNS2EqNUt

Mounting goole drive
"""

from google.colab import drive
drive.mount('/content/gdrive', force_remount=True)
root_dir = "/content/gdrive/My Drive/"
base_dir = root_dir + 'fastai-v3/'

from fastai import *
from fastai.vision import *

"""# **Data Preparation**

Use this code to scrape images from google in a txt file.
"""

urls=Array.from(document.querySelectorAll('.rg_i')).map(el=> el.hasAttribute('data-src')?el.getAttribute('data-src'):el.getAttribute('data-iurl'));
window.open('data:text/csv;charset=utf-8,' + escape(urls.join('\n')));

folder = 'apple'
file = 'apple.txt'

folder = 'orange'
file = 'orange.txt'

folder = 'kiwi'
file = 'kiwi.txt'

folder = 'peach'
file = 'peach.txt'

path = Path('gdrive/My Drive/fastai-v3/fruits')
dest = path/folder
dest.mkdir(parents=True, exist_ok=True)

path

classes = ['apple', 'orange', 'kiwi', 'peach']

"""download images from the text files which scraped images."""

download_images(path/folder/file, dest, max_pics=300)

"""# **DataBunch**

Creating an image databunch with batchsize of 16
"""

data = ImageDataBunch.from_folder(path, train='.', valid_pct=0.25, size=224, bs=16).normalize(imagenet_stats)

len(data.train_ds)

len(data.valid_ds)

len(data.classes), data.c

data.show_batch(row=5, figsize=(8, 8))

"""Creating the Learner object to fit the model"""

learn = cnn_learner(data, models.resnet50, metrics=[accuracy, error_rate])

"""## **Training**"""

learn.fit_one_cycle(10)

learn.save('stage-1')

"""Unfreeze the learner object to be able to train rest of the layers as well"""

learn.unfreeze()

learn.load('stage-1')

"""Finding the learning rate"""

learn.lr_find()

learn.recorder.plot()

learn.recorder.plot_lr

learn.fit_one_cycle(12, slice(5e-05, 4e-05))

learn.save('stage-2')

"""# **Results**"""

learn.load('stage-2')
interpt = ClassificationInterpretation.from_learner(learn)

interpt.plot_top_losses(9)

interpt.plot_confusion_matrix()

interpt.most_confused(min_val=2)

learn.export('fruits.pkl')

learn.export()

path

"""# **Image Prediction**"""

image_to_pred = open_image(path/'peach/00000077.jpg')
image_to_pred

learn = load_learner(path)

preds, y_true, indx = learn.predict(image_to_pred)

preds

y_true

indx

